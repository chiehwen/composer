#!/usr/bin/env python

import re
import yaml

from composer.index import Index, Route, Static
from composer.filters import Filter, MakoContainer, Mako, Markdown


## Filters:

class StripHeader(Filter):
    def __call__(self, content, route=None):
        # TODO: Strip the YAML header from the content and return it.
        return content

class RestructuredText(Filter):
    # TODO: Implement this.
    pass

class BlogofileMako(MakoContainer):
    def __call__(self, content, route=None):
        # TODO: Inject the context that Blogofile templates expect.
        return str(self.template.render(index=self.index, body=content, route=route))


## Helpers:

def get_yaml_header(file):
    return yaml.load_all(open(file)).next()

def strip_ends(s, prefix='', suffix=''):
    return s[len(prefix):-len(suffix)]


## Index:

class BlogofileIndex(Index):
    def _register_filters(self):
        super(BlogofileIndex, self)._register_filters()

        self.register_filter('mako', Mako, {'directories': ['_templates']})
        self.register_filter('markdown', Markdown)
        self.register_filter('rst', RestructuredText)

        self.register_filter('post', BlogofileMako, {'directories': ['_templates'], 'template': 'post.mako'})
        self.register_filter('strip', StripHeader)

    def _generate_static(self):
        for file in self.walk(exclude=[".*", "_*"]):
            yield Static(self.absolute_url(file), file)

    def _generate_routes(self):
        # Fixed pages
        for file in self.walk(include_only=['*.html.mako']):
            url = strip_ends(file, suffix='.html.mako')
            url = self.absolute_url(url.replace('index', ''))

            filters = ['mako']
            context = None # TODO: ...

            yield Route(url, file=file, filters=filters, context=context)

        # Posts
        for file in self.walk('_posts'):
            header = get_yaml_header(file)
            url = "posts/" + re.sub("[^a-zA-Z0-9_]", "-", header['title'])

            filters = ['strip']
            if file.endswith('.rst'):
                filters.append('rst')

            context = None # TODO: ...

            yield Route(url, file, filters=filters, context=context)


if __name__ == '__main__':
    import json
    index = BlogofileIndex()
    print json.dumps(index.to_dict(), indent=4)
