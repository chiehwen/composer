#!/usr/bin/env python
import os
import re
import sys
import json
import argparse

import yaml

class Blogofile2Manifest(object):
    known_extensions = {
        "mako": {
            "filters": ["mako"],
            "strip": True,
        },
        "_default": {
            "filters": [],
            "strip": False,
        },
    }

    def __init__(self, root):
        self.root = root

    def build_routes(self):
        self.routes = []
        self.default_context = {}
        self.manifest = {
            "routes": self.routes,
            "default_context": self.default_context,
        }

        self.posts = {}

        file = None
        try:
            for file in self.walk_files():
                self.process_file(file)
        except Exception, e:
            raise Exception("error while processing %r: %r" %(file, e)), None, sys.exc_info()[2]

    def walk_files(self):
        for dirpath, dirnames, filenames in os.walk(self.root, topdown=True,
                                                    followlinks=True):
            dirnames[:] = [ dir for dir in dirnames
                            if dir == "_posts" or dir[0] not in "._" ]
            for file in filenames:
                if file[0] not in "._":
                    yield os.path.join(dirpath, file)

    def file_ext(self, file):
        if "." not in os.path.basename(file):
            return file, ""
        return file.rsplit(".", 1)

    def settings_for_ext(self, ext):
        settings = self.known_extensions.get(ext, None)
        return settings or self.known_extensions["_default"]

    def process_file(self, file):
        if "_posts/" in file:
            self.process_post(file)
            return

        base, ext = self.file_ext(file)
        ext_settings = self.settings_for_ext(ext)

        url_path = file
        if ext_settings["strip"]:
            url_path = base

        url = url_path[len(self.root):].lstrip("/")
        self.add_route(url, file, ext_settings["filters"])

    def process_post(self, file):
        post_data = yaml.load_all(open(file)).next()
        if not isinstance(post_data, dict):
            raise ValueError("post doesn't have a YAML header (found: %r)"
                             %(post_data))
        self.posts[file] = post_data
        _, ext = self.file_ext(file)
        url = self.post_url(post_data)
        filters =  ["strip_blogofile_header"]
        if ext != "html":
            filters.append(ext)
        self.add_route(url, file, filters, post_data)

    def post_url(self, post_data):
        title = post_data["title"].lower()
        return "posts/" + re.sub("[^a-zA-Z0-9_]", "-", title)

    def add_route(self, url, file, filters, context=None):
        self.routes.append({
            "url": url,
            "file": file,
            "filters": filters,
            "context": context or {},
        })


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("root", help="""
        Root of blogofile site (contains _posts, _config, etc).
    """)
    return parser.parse_args()


def main():
    args = parse_args()
    generator = Blogofile2Manifest(args.root)
    generator.build_routes()
    print json.dumps(generator.manifest)
    return 0

if __name__ == "__main__":
    sys.exit(main())
